def scan_type
def target
pipeline {
    agent {
        label 'linux'
    }
    parameters {
        choice  choices: ['Baseline', 'APIS', 'Full', 'SQLInjection'],
                 description: 'Type of scan that is going to perform inside the container',
                 name: 'SCAN_TYPE'

        string defaultValue: 'https://xyz-test.com/',
                 description: 'Target URL to scan',
                 name: 'TARGET'

        booleanParam defaultValue: true,
                 description: 'Parameter to know if you want to generate a report.',
                 name: 'GENERATE_REPORT'
    }
    stages {
        stage('Pipeline Info') {
            steps {
                script {
                    echo '<--Parameter Initialization-->'
                    echo """
                         The current parameters are:
                             Scan Type: ${params.SCAN_TYPE}
                             Target: ${params.TARGET}
                             Generate report: ${params.GENERATE_REPORT}
                         """
                }
            }
        }

        stage('Setting up OWASP ZAP docker container') {
            steps {
                echo 'Pulling up latest OWASP ZAP container --> Start'
                sh 'docker pull owasp/zap2docker-stable:latest'
                echo 'Starting container --> Start'
                sh 'docker run -dt --name owasp owasp/zap2docker-stable /bin/bash'
            }
        }

        stage('Prepare wrk directory') {
            when {
                environment name: 'GENERATE_REPORT', value: 'true'
            }
            steps {
                script {
                    sh '''
                         docker exec owasp \
                         mkdir /zap/wrk
                     '''
                }
            }
        }

        stage('Scanning target on OWASP container') {
            steps {
                script {
                    scan_type = "${params.SCAN_TYPE}"
                    echo "----> scan_type: $scan_type"
                    target = "${params.TARGET}"
                    if (scan_type == 'Baseline') {
                        sh """
                             docker exec owasp \
                             zap-baseline.py \
                             -t $target \
                             -r report.html \
                             -I
                         """
                    } else if (scan_type == 'APIS') {
                        sh """
                             docker exec owasp \
                             zap-api-scan.py \
                             -t $target \
                             -r report.html \
                             -I
                         """
                    } else if (scan_type == 'Full') {
                        sh """
                             docker exec owasp \
                             zap-full-scan.py \
                             -t $target \
                             -r report.html \
                             -I
                         """
                    } else {
                        echo 'Something went wrong...'
                    }
                }
            }
        }

        // New Stage for SQL Injection
        stage('SQL Injection Scan using ZAP') {
            when {
                expression {
                    return params.SCAN_TYPE == 'SQLInjection'
                }
            }
            steps {
                script {
                    echo 'Starting SQL Injection scan using OWASP ZAP'
                    target = "${params.TARGET}"
                    // Run ZAP Active Scan with SQL Injection enabled
                    sh """
                        docker exec owasp zap-full-scan.py \
                        -t $target \
                        -r sql_injection_report.html \
                        -I --context /zap/wrk/sql_injection.context
                    """
                }
            }
        }

        stage('Copy Report to Workspace') {
            steps {
                script {
                    sh '''
                         docker cp owasp:/zap/wrk/report.html ${WORKSPACE}/report.html
                         docker cp owasp:/zap/wrk/sql_injection_report.html ${WORKSPACE}/sql_injection_report.html
                     '''
                }
            }
        }

        stage('Email Report') {
            steps {
                emailext(
                    attachLog: true,
                    attachmentsPattern: '**/*.html',
                    body: "Please find the attached report for the latest OWASP ZAP SQL Injection Scan.",
                    recipientProviders: [buildUser()],
                    subject: "Security Scan Reports",
                    to: 'abc@example.com'
                )
            }
        }
    }

    post {
        always {
            echo 'Removing container'
            sh '''
                 docker stop owasp
                 docker rm owasp
             '''
            cleanWs()
        }
    }
}
